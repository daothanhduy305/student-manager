buildscript {
    ext {
        kotlinVersion = '1.3.40'
        springBootVersion = '2.1.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlinVersion
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-allopen', version: kotlinVersion
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.20'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.20'
    id "edu.sc.seis.macAppBundle" version "2.3.0"
    id 'com.palantir.git-version' version '0.11.0'
    id 'edu.sc.seis.launch4j' version '2.4.6'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

def details = versionDetails()
details.lastTag
details.commitDistance
details.gitHash
details.gitHashFull // full 40-character Git commit hash
details.branchName // is null if the repository in detached HEAD mode
details.isCleanTag

group = 'com.ebolo'
version = details.lastTag + '-' + details.gitHash.substring(0, 6)
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springBootVersion
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'no.tornado:tornadofx:1.7.19'
    implementation 'com.jfoenix:jfoenix:8.0.8'
    implementation 'de.jensd:fontawesomefx-commons:8.15'
    implementation 'de.jensd:fontawesomefx-materialicons:2.2.0-5'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation "de.codecentric.centerdevice:centerdevice-nsmenufx:2.1.6"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

macAppBundle {
    mainClassName = "org.springframework.boot.loader.JarLauncher"
    icon = "student-manager.icns"
    bundleJRE = false
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    //backgroundImage = "doc/macbackground.png"
    jarTask = 'bootJar'
    appName = 'Student Manager'
    dmgName = "Student Manager $details.lastTag"
    volumeName = 'Student Manager ' + version
    bundleIdentifier = "com.ebolo.studentmanager"
}

//tasks.createExe.dependsOn(bootJar)

launch4j {
    mainClassName = 'org.springframework.boot.loader.JarLauncher'
    icon = "${projectDir}/StudentManager.ico"
    jreMaxVersion = "1.8.0_211"
    copyConfigurable = project.tasks.bootJar.outputs.files
    jar = "lib/${project.tasks.bootJar.archiveName}"
}

task createProperties(dependsOn: processResources) {
    doFirst {
        def versionFile = new File("$projectDir/src/main/resources/version.properties")
        
        if (versionFile.exists()) {
            versionFile.delete()
        }
        
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

task createPropertiesDev(dependsOn: processResources) {
    doFirst {
        new File("$projectDir/src/main/resources/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}